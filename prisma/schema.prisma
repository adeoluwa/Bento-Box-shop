// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model User {
  id        String    @id @default(uuid())
  email     String    @unique
  first_name String?
  last_name  String?
  password  String    
  phone_number String?
  address       String?
  is_verified   Boolean  @default(false)
  verified_at   DateTime?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt

  sessions      Session[]
  orders        Order[]
  cart          Cart?
  payments      Payment[]
  Otp           Otp?

  @@map("users")
}

model Otp {
  user_id    String      @unique
  user       User?        @relation(fields: [user_id], references: [id])
  code       String
  email      String
  created_at  DateTime   @default(now())
  expires_at  DateTime   

  @@map("otps")
}

model Session {
  id           String   @id @default(uuid())
  user_id       String   @unique
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  token        String  @unique
  email        String
  expires_at   DateTime
  created_at   DateTime  @default(now())

  @@map("sessions")
}

model Category {
  id      String        @id @default(uuid())
  name    String        @unique
  products Product[]
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id   String    @id @default(uuid())
  name String  
  description String?
  price    Decimal
  stock    Int       @default(0)
  category_id  String
  category    Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model Cart {
  id        String   @default(uuid()) @unique
  user_id     String  @unique
  user       User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items      CartItem[]

  @@map("carts")
}

model CartItem {
  id  String  @id @default(uuid())
  cart_id  String 
  cart    Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product_id  String
  product   Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  quantity  Int    @default(1)

  @@map("cart_items")
}

model Order {
  id        String  @id @default(uuid())
  user_id   String 
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  status    OrderStatus  @default(PENDING)
  total_amount Decimal
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt

  orderItems   OrderItem[]
  payments     Payment[]
  shipping     Shipping?

  @@map("orders")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id     String  @id @default(uuid())
  order_id String
  order    Order  @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product_id String
  product    Product @relation(fields: [product_id],references: [id], onDelete: Cascade)
  quantity  Int
  price     Decimal

  @@map("order_items")
}

model Payment {
  id  String     @id @default(uuid())
  order_id  String?
  order   Order? @relation(fields: [order_id], references: [id], onDelete: Cascade)
  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  status  PaymentMethod
  created_at DateTime @default(now())

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  STRIPE
  CASH_ON_DELIVERY
}

model Shipping {
  id    String   @id @default(uuid())
  order_id   String  @unique
  order      Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  tracking_id  String?
  status      ShippingStatus @default(PENDING)
  created_at  DateTime  @default(now())

  @@map("shipping")
}

enum ShippingStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}